import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormsModule } from '@angular/forms';

import { Comment, MentionPattern } from '../../models/comment'; // Import the Comment interface
import { User } from '../../models/user';

@Component({
  selector: 'comment-form',
  standalone: true,
  imports: [FormsModule],
  templateUrl: './comment-form.component.html',
  styleUrl: './comment-form.component.css',
})
export class CommentFormComponent {
  @Input() author: string = 'system';
  @Input() users: User[] = [];

  @Output() newComment = new EventEmitter<Comment>(); // Add this line
  @Output() notifyUser = new EventEmitter<string>();

  comment: Comment = {
    id: 5, // Hardcoded for now, but this would be generated by the server
    author: this.author,
    content: '',
    timestamp: new Date(),
  };

  onInput(event: Event): void {
    const input = (event.target as HTMLTextAreaElement).value;
    const char = input.charAt(input.length - 1);

    /** When user enters the @ character a popup could appear with a list of users, allowing them
     * to select a user to mention in the comment. */
    if (char === '@') {
      console.log('User is mentioning someone.');
    }
  }

  onSubmit() {
    this.comment.timestamp = new Date();
    console.log('Comment submitted:', this.comment);
    this.findAllMentionsAndNotify();
    this.newComment.emit(this.comment); // Emit the new comment
    this.resetComment();
  }

  /** Check each mention and see if it is in the list of users.
   * If so, call function passed to us for this purpose. */
  public findAllMentionsAndNotify() {
    const matches = this.comment.content.match(MentionPattern);
    if (matches) {
      matches.forEach((match) => {
        const mention = match.slice(1); // Remove the @ character
        console.log('Mention detected:', mention);
        if (this.users.some((user) => user.name === mention)) {
          this.notifyUser.emit(mention);
        }
      });
    }
  }

  private resetComment() {
    this.comment = {
      id: 5, // Reset to a new id or handle id generation appropriately
      author: this.author,
      content: '',
      timestamp: new Date(),
    };
  }
}
