import { CommonModule } from '@angular/common';
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormsModule } from '@angular/forms';

import { Comment, MentionPattern } from '../../models/comment'; // Import the Comment interface
import { User } from '../../models/user';
import getCaretCoordinates from 'textarea-caret'; // Updated import statement

@Component({
  selector: 'comment-form',
  standalone: true,
  imports: [FormsModule, CommonModule],
  templateUrl: './comment-form.component.html',
  styleUrl: './comment-form.component.css',
})
export class CommentFormComponent {
  @Input() author: string = 'system';
  @Input() users: User[] = [];

  @Output() commentSubmitted = new EventEmitter<Comment>();
  @Output() notifyUser = new EventEmitter<string>();

  public showUserList: boolean = false;
  public filteredUsers: User[] = [];
  public userListStyle: { top: string; left: string } = {
    top: '0px',
    left: '0px',
  };
  public textArea: HTMLTextAreaElement | undefined = undefined;

  comment: Comment = {
    id: 5, // Hardcoded for now, but this would probably be generated by the server/db
    author: this.author,
    content: '',
    timestamp: new Date(),
  };

  onKeyUp(event: KeyboardEvent) {
    /** Select first user in list if enter key is pressed. */
    if (
      event.key === 'Enter' &&
      this.showUserList &&
      this.filteredUsers.length > 0
    ) {
      console.log(
        'Enter key pressed, selecting first user in list.',
        this.filteredUsers[0]
      );
      event.preventDefault();
      this.onSelectUser(this.filteredUsers[0]);
      return;
    }

    /** Check to see if there is a user being mentioned,
     * if so populate the user list with matching users and
     * position the list at the caret.
     */
    this.textArea = event.target as HTMLTextAreaElement;
    const input = this.textArea.value;
    const mentionIndex = input.lastIndexOf('@');
    if (mentionIndex !== -1) {
      this.showUserList = true;
      const mentionText = input.slice(mentionIndex + 1);
      this.filterAndSortUsers(mentionText);
      this.positionUserList(this.textArea);
    }
  }

  /** When a user is selected from the list, paste their name into the message. */
  onSelectUser(user: User) {
    const mentionIndex = this.comment.content.lastIndexOf('@');
    if (mentionIndex === -1) {
      console.error('No mention character found in comment.');
      return;
    }

    this.comment.content =
      this.comment.content.slice(0, mentionIndex + 1) + user.name + ' ';
    this.showUserList = false;
    this.focusTextarea();
  }

  /** Let everybody know that a new comment is being submitted,
   * notify users who were mentioned, and reset the comment form.
   */
  onSubmit() {
    this.comment.timestamp = new Date();
    console.log('Comment submitted:', this.comment);
    this.findAllMentionsAndNotify();
    this.commentSubmitted.emit(this.comment);
    this.resetComment();
  }

  /** Check each mention and see if it is in the list of users.
   * If so, call function passed to us for this purpose.
   */
  public findAllMentionsAndNotify() {
    const matches = this.comment.content.match(MentionPattern);
    if (matches) {
      matches.forEach((match) => {
        const mention = match.slice(1); // Remove the @ character
        console.log('Mention detected:', mention);
        if (this.users.some((user) => user.name === mention)) {
          this.notifyUser.emit(mention);
        }
      });
    }
  }

  private resetComment() {
    this.comment = {
      id: 5,
      author: this.author,
      content: '',
      timestamp: new Date(),
    };
  }

  /** Filter users to ones that match what the user has typed, sort alphabetically. */
  private filterAndSortUsers(mentionText: string) {
    this.filteredUsers = this.users
      .filter((user) =>
        user.name.toLowerCase().startsWith(mentionText.toLowerCase())
      )
      .sort((a, b) => {
        var nameA = a.name.toUpperCase();
        var nameB = b.name.toUpperCase();
        return nameA < nameB ? -1 : nameA > nameB ? 1 : 0;
      });
  }

  /** Place user list so it is at the edit caret. */
  private positionUserList(textArea: HTMLTextAreaElement) {
    let { top, left } = textArea.getBoundingClientRect();

    let caret = getCaretCoordinates(textArea, textArea.selectionEnd);
    top += caret.top;
    left += caret.left + 5;

    this.userListStyle = {
      top: `${top}px`,
      left: `${left}px`,
    };
  }

  /** Restore the focus to the text area. */
  private focusTextarea() {
    const textArea = this.textArea;
    if (!textArea) {
      console.error('Textarea not found.');
      return;
    }

    textArea.focus();
    textArea.setSelectionRange(textArea.value.length, textArea.value.length);
  }
}
